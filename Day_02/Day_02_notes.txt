

               ### **Day 2: Python Course Content**

**Question 01: What is a string?**  
A string is a sequence of characters enclosed in quotation marks. In Python, strings can be enclosed in either single (`' '`) or double (`" "`) quotes. 

Example:
```python
str1 = "Hello, World!"
```

**Question 02: Basic operations on strings**

1. **Concatenation:**
   - Concatenation is the process of joining two or more strings together using the `+` operator.
   - Example:
   ```python
   str1 = "Hello"
   str2 = "World"
   final_str = str1 + " " + str2  # Output: "Hello World"
   ```

2. **Finding the length of a string:**
   - You can find the number of characters in a string using the `len()` function.
   - Example:
   ```python
   str1 = "Hello"
   len_of_str1 = len(str1)  # Output: 5
   ```

3. **Indexing:**
   - Indexing refers to accessing individual characters in a string by their position. Indexing starts from 0.
   - Example:
   ```python
   str1 = "Hello"
   first_char = str1[0]  # Output: 'H'
   ```
   - Strings are **immutable**, meaning they cannot be changed after creation.
   - Example of string indices:
   ```
   0  1  2  3  4
   H  e  l  l  o
   ```

4. **Slicing:**
   - Slicing allows you to extract a portion of a string by specifying a start and end index.
   - Syntax:
   ```python
   sliced_str = stringName[start_index:end_index]
   ```
   - Example:
   ```python
   str1 = "I am a programmer"
   slice_str = str1[2:6]  # Output: 'am a'
   ```
   - If the start index is omitted, slicing starts from the beginning of the string.
   - If the end index is omitted, slicing goes until the end of the string.
   - Spaces are counted as characters.
   - Negative indexing allows you to start slicing from the end of the string.
   - Example:
   ```python
   last_char = str1[-1]  # Output: 'r'
   ```

**Question 03: String functions**

1. **endswith():**
   - Checks if the string ends with a specific substring and returns `True` or `False`.
   - Example:
   ```python
   str1 = "Hello"
   result = str1.endswith("lo")  # Output: True
   ```

2. **capitalize():**
   - Converts the first character of the string to uppercase and the rest to lowercase.
   - Example:
   ```python
   str1 = "hello"
   capitalized_str = str1.capitalize()  # Output: 'Hello'
   ```

3. **replace():**
   - Replaces occurrences of a specified substring with another substring.
   - Example:
   ```python
   str1 = "hallo"
   replaced_str = str1.replace("a", "e")  # Output: 'hello'
   ```

4. **count():**
   - Counts the number of occurrences of a specified character or substring in the string.
   - Example:
   ```python
   str1 = "hello"
   count_l = str1.count("l")  # Output: 2
   ```

5. **find():**
   - Finds the first occurrence of a specified substring and returns its index. If not found, it returns `-1`.
   - Example:
   ```python
   str1 = "hello"
   index_of_e = str1.find("e")  # Output: 1
   ```

**Question 04: What is a conditional statement?**
- A conditional statement allows you to execute certain blocks of code based on specific conditions. It's used for making decisions in your code.
- Common conditional statements include `if`, `elif`, and `else`.

Example:
```python
if condition1:
    # Code block executed if condition1 is true
elif condition2:
    # Code block executed if condition1 is false and condition2 is true
else:
    # Code block executed if both conditions are false
```

---
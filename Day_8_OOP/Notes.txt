                      Object Oriented Programing
1. some time we doing procedral programing means writting code and it is executed line by line.
2. some time we use function that reduce the redundancy and increase the reuseability.
3. some times we use OOP that help us in reusability and reducing redundancy.

Class And Objects:

Class:
class is the blue print for creating objects.
For example:
we have student class and its abjects will be name, age, grade, subjects etc.

Syntax:

class Classname:
objectname = value

Details:
class : class is the keyword for creating class.
Clssname: it can be any variable and it should be start with capital letter.
objectname: it can be the name of anything related to class data
value : value is the data that would be store in the objectname variable.

For example:

class Student:
age = 12
grade = A

Creating Objects:

instancename = classname()

Accessing the class's object:
instance.objectname

Constructor:
constructor is special type of method that is called automatically when the class object is created.
In case of constructor we don't need to called our class specifically all the data inside the class is executed when the object for that class is created.


Types of constructor:
Default constructor. (having no parameters)
Parameterized constructor. (having parameters)

Syntax:

def__init__(self):

now we need to just create the object of that class and all the data inside the class will execute automatically.

Example is given in code section:

Class attributes and objects attributes:
Class attributes are variables that belong to the class itself and are shared among all instances of the class. They remain the same across all objects of that class unless explicitly changed at the class level.

Object (or instance) attributes are variables that belong to individual instances of the class. Their values can differ from one object to another.

Example:
In a college class, the attribute college_name could be a class attribute because it would be the same for all students in the class. On the other hand, student_name would be an object attribute because each student would have a unique name.

Note: we can access the class attribute by class name too.
For example:

class_name.class_attribute_name

Note: if the there is an attribute which has declare as the class and object attribute then the object attribute precedence is high so the class attribute value would be overwritten as the value of object attribute.

Methods:
class is the collection of two things
1. Attributes.(data, properties)
2. Methods. (function, what can be perform)

Syntax:

def method_name() : we have to must pass the parameter to method. if there is no parameter then we pass by default "self" parameter.

Calling method:

object_name.method_name


Static method:
The method which don't use the self parameter.The static method work at class level instead of object level.
As self is used for objects but in case of static method we do not use the object as such so for declaring method as static method we write:

@staticmethod: this is called decorator : which extend the behavior of function without parmanently changing it.
method_name.......


Abstraction:
it is a way to hide the implementation from users and showing important feature to the users.

Encapsulation:
wrapping data and function into single unit is called encapsulation.

Deletion of object or the attribute of an object:

del obj_name  : for deletion of the object.
del obj_name.att_name : for deletion of object attribute.

Public and private attributes and methods:
public : accessable outside of the class.
private : only accesable inside the class. (to make something private we put two underscore before that)

Inheretance:
when one class(children class) derive the properies and method of another class(parent class) then this is class inheretance.

Syntax:
class parent_class:
    attributes
    methods

class child_class(parent_class):

Types of inheritance:
1. single level inheritance (single child and parent class that inherit the properties from parent class)
2. multi_level inheritance (where one class derive from another and another class derive from previous one. like there are multiple parent and children which are parent at time and child as well.)
3. multiple inheritance (the class which has multiple parents but single child like one single child inheret properties from differnet class.)

Syntax:
class multiple_inheritance(class_one, class_two, class_three)









                ****Dictionary And Sets In Python *****
The Dictionary is builint_ data type in python which store the data which having different datatype (string, list , tupple, int , boolean, float) in form of Key:value. (key is word and value is the the data.)

properties of Dictionary:
1. mutable (changeable)

2. unordered (no rule which thing will come first like string , list and tupple have index so we know that index 1 value come first then index 2 so there is no such things here in dic will be declare first or int no such things)

3. Unique (Two keys can not have same names like, we can not create to keys having same name "age")
it is mutable , unordered and unique(no duplication)

Syntax:

dic_name = {
    key:value
}

student= {
    "name" :john, : string
    "class" :      5  , :int
    "grade" :"A" , : string
    "Percentage" : 80.90,: flaot
}


Note: the keys should be constant that should not change in future like list, we can add and remove element from list so we can not make the list as key.

Accessing value in distionary:
we can access any value in dictionary through the key:
Syntax:
dic_name [key_name]
student[name] if we write it with print function then we will get the student name:

Changing the Values of key:
we can change any value in distionary.
Syntax:
dic_name[key] = "value"
student[name] = "Edison" : jon will be change to Edison

Nested distionary:
creating a distionary inside a dictionary.
for example we have a info of a student and we wanto to add his subjects and marks so for this we need another distionary.
Syntax:
dic_name = {
    dic_name = {

    }
}

Null Distionary:
we can create a null dictionary and update it time by time as needed.

Syntax:
n_dic = {

}
Updation:
n_dic["Name"] = "John"

Accessing nested dictionary element:
Syntax:
main_dic_name[inner_dic_name][key_name]

We can also create a Null dictionary by not assigning it any value:

Syntax:
dic_name = {
    
}

Funtions in Dictionary:
1. dic_name.keys()
this function return all the keys in dictionary.(only keys not values and in case of nested dictionary it only return the outer disctionary name as key.)

Note: we can convert the output of key in list too.
Syntax:
print(list(dic_name.keys))

Finding Lengths or total keys in Dictionary:
print(len(dic_name))

2. dic_name.values()
It return the Values of keys in dictionary
Syntax:
dic_name.values()

3. dic_name.items()

It returns all the key:value pair in form of tupples
Syntax:
dic_name.items()

4. dic_name.get(key_name)
It return specific value of key that is given in input inside the paranthesis

Note: another way for getting specific key is: din_name[key].

5. dic_name.update()
Through this method we can update our dictionary and add key:value pair in our dictionary.
Method: 01
new_dic = {"name":"Neha", "age":39,}
dic_name.update(new_dic)

Method: 02
dic_name.update("name": Neha chopra") : it will update the existing value


                  ******Set in Python*******
Sets are the unique collection of Element.
Every element should be unique and immutable.
Elements are unordered.
If we try to store the duplicate value it will not generate any error only will ignore that value.

Syntax:

set_name = {element1 , element2 , element3}

Empty Set:
We can create an empty set as well but it syntax is little bit different.

Syntax:
set_name ={} : it  is considered as dictionary for set: set_name = set()

Important functions in set:

1. set_name.add()
It add element to set.

2. set_name.remove()
it remove the element from set.

3. set_name.clear()
it empatize the set.

4. set_name.pop()
it show random vlaue on screen.

5. set_name.union()
combine the two sets and list down all the values in both sets and ignore the repeation means if 2 is in set1 and also in set2 then in union of set 2 is be written once.
syntax:
set1.union(set2)


6. set_name.intersection()
It list down all the values that exist in both sets (common values)















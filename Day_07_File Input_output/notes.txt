                   Day : 07
            File input and output:
Python can be used to perform operation on file. 
Operation on file means opening file, reading file , creating file, making changes in file and so more.  

There are Two major Types of files.
1. Text file: in which we store the data in form of characters.
for example:
.txt , docx , ppp,  .log etc

2. Binary file: where we store data other than text format.
mp4 , mov , png , jpg etc.

Basic Operation on file:

1. opening file:
opening file means open that file for any other operation like writing , reading , append , updating , deletion etc.

Format for opening file:

f = open("fileName.txt", "mode") 

here 
f : is a variable that create object for file
fileName: it is the name of your file you want to open.
mode: it show the mode like for which operation you want to open the file for example for read for which we write "r", for writing we write "w" for 




Modes in File:
r : for reading data from file
w : for removing all data and writting new data in file
x : creating new file and writing data in that file
a : open for writing and adding data at the end of the file.
b : it is used for binary file operation 
t : it is used for text file operation
+ : it is used for two operation simultaneously. like reading and writting

Reading file:

first open the file.
content = f.read()

now if we want to read some specific part in file like first 10 letters then we pass the length.

like:
content = f. read(10)

Reading file line by line:

line1 = f.readline()

so it will read first line in file.


Note: when the compiler read data once then next time it didn't read that data or content again.

For example:
once we read the whole file by 
content =  f.read()
then if we write to read a line, the result would be empty line because the whole file is already read by compiler and now the cursor is in the end so when the command for line will be executed the cursor will go to next line where there is noting to display for read and it will display the empty line.

Writting to a file:

There are two modes in write.

1. Write mode.(it overwrite means first remove all the data and start writing new data)

2. Append mode. (this command add the new data at the end of the file. For example in file i have "i am programmer." and i use append command so it will not remove the "i am programmer" this command will add all new data at the end of this line. Like if i add "i love coding" so the final output will be "i am programmer. i love coding" )

Note: if you write the file name with append or write mode and that file does not exist then the compiler automatically make that file in folder.


+ . Use to perform two operation simultaneously like reading and writing (r+) but it will not override means the existing data in file will not be truncated(deleted or removed). Here the curson start from beginning of the file. i have first sentence "am programmer." and i use r+ mode and add data "i". so "i" will be added at the beginning of the sentence and it will become "im programmer" means i is added at the beginning at the place a in string am. now it is im.

For reading and writing(w+) it is also used for reading and writing but the file data will removed first.

a+ mode: it is used to append (add) the data at the end of the file.
For example "i am" 
i append "programmer" so it will be added in end and the final sentence will become " i am programmer"


With Syntax:
the is used to close the file automatically.

Benefits:

Automatic file closing: Ensures the file is closed properly.
Cleaner code: No need for manual close() calls.
Better error handling: File closes even if an error occurs.
Fewer bugs: Reduces the risk of resource leaks.


like:

f = open("filename.ext", "mode")
f.read()
f.write()
f.close()
so here we need to use the f again and again which indicate that here is the all data of file. But with with syntax we can make things easy:


with open("filename.ext", "mode") as f
  f.read()
  f.write()
  AND DONT NEED TO CLOSE THE FILE IT AUTOMATICALLY CLOSE THE FILE.


Deletion of File:

to delete a file we need a module:
module is the block of code which is pre built by the developer
That module is os we first import it the use it function remove.

Syntax:
 
 import os
 os.remove("file_name")






